application:
#  jwt:
#    secretKey: 'TheitsybitsyspiderclimbedupthewaterspoutDowncametherainandwashedthespiderout'
#    tokenPrefix: 'Bearer '
#    tokenExpirationAfterMinutes: 3600
#    refreshTokenExpirationAfterDays: 14

spring:
  application:
    name: thebook-application
  datasource:
    url: jdbc:postgresql://localhost:5432/thebook
    username: thebook-app
    password: thebook-app
    driver-class-name: org.postgresql.Driver
    testWhileIdle: true
    validationQuery: SELECT 1
    jpa:
      hibernate:
        ddl-auto: update
      properties:
        hibernate:
          dialetc: org.hibernate.dialect.PostgreSQLDialect
          format_sql: true

queries:
  sql:

    user-dao:
      insert:
        user: >
          INSERT INTO thebook_platform.user (id, name, username, email, password) VALUES (?, ?, ?, ?, ?)
      select:
        all:
          SELECT * FROM thebook_platform.user
        user-by-id:
          SELECT * FROM thebook_platform.user WHERE id = ?
        user-by-username:
          SELECT * FROM thebook_platform.user WHERE username = ?
        user-by-email:
            SELECT * FROM thebook_platform.user WHERE email = ?
        user-by-username-and-password:
            SELECT * FROM thebook_platform.user WHERE username = ? and password = ?
      exists:
        user-by-id:
          SELECT EXISTS(SELECT 1 FROM thebook_platform.user WHERE id = ?)
    book-dao:
      insert:
        book: >
          INSERT INTO thebook_platform.book (id, pages, title, gender, 
          author, classification, summary, date_add, id_user_add, status, 
          average) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?::thebook_platform.book_status, ?)
      select:
        all:
          SELECT * FROM thebook_platform.book
        book-by-id:
          SELECT * FROM thebook_platform.book WHERE id = ?

    reading-dao:
      insert:
        reading: >
          INSERT INTO thebook_platform.reading (id, id_user, id_book, 
          date_start, status, is_favorite, rating) VALUES(?, ?, ?, ?, ?::thebook_platform.reading_status, ?, ?)
      select:
        all: >
          SELECT * FROM thebook_platform.reading WHERE id_user = ?
        all-favorites: >
          SELECT * FROM thebook_platform.reading WHERE id_user = ? AND is_favorite = true
        reading: >
          SELECT * FROM thebook_platform.reading WHERE id_user = ? AND id_book = ?
      update:
        state: >
          UPDATE thebook_platform.reading SET status = ?::thebook_platform.reading_status
          WHERE id_user = ? AND id_book = ?
        favorite:
          UPDATE thebook_platform.reading SET is_favorite = ? WHERE id_user = ? AND id_book = ?
      exists:
        reading:
          SELECT EXISTS(SELECT 1 FROM thebook_platform.reading WHERE id_user = ? AND id_book = ?)
    chatroom-dao:
      insert:
        chatroom: >
          INSERT INTO thebook_platform.chatroom (id, id_user, id_book) 
          VALUES (?, ?, ?)
      select:
        all: >
          SELECT * FROM thebook_platform.chatroom
        chatroom-by-id: >
          SELECT * FROM thebook_platform.chatroom WHERE id = ?
        chatroom-by-id-user: >
          SELECT * FROM thebook_platform.chatroom WHERE id_user = ?
        chatroom-by-id-book: >
          SELECT * FROM thebook_platform.chatroom WHERE id_book = ?
      exists:
        chatroom-by-id: >
          SELECT 1 FROM (SELECT * FROM thebook_platform.chatroom WHERE id = ?)

    comment-dao:
      insert:
        comment: >
          INSERT INTO thebook_platform.comment (id, id_user, id_chatroom, text) 
          VALUES (?, ?, ?, ?)
      select:
        all: >
          SELECT * FROM thebook_platform.comment
        comment-by-id: >
          SELECT * FROM thebook_platform.comment WHERE id = ?
        comment-by-id-user: >
          SELECT * FROM thebook_platform.comment WHERE id_user = ?
        comments-by-id-chatroom: >
          SELECT * FROM thebook_platform.comment WHERE id_chatroom = ?